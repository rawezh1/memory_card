{"version":3,"sources":["components/score-bar.js","components/card-container.js","components/Solarium.png","components/title.js","components/Mercury.png","components/Earth.png","components/Venus.png","components/Mars.png","components/Jupiter.png","components/Saturn.png","App.js","reportWebVitals.js","index.js"],"names":["ScoreBar","props","id","currentScore","bestScore","CardContainer","cards","map","card","index","className","name","src","alt","onClick","clickHandler","Title","style","maxHeight","width","logo","App","useState","score","setScore","setBestScore","planetArray","clicked","position","mercury","venus","earth","mars","jupiter","saturn","setCards","shuffle","array","rndCard","thisCard","length","Math","random","margin","padding","e","findIndex","x","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAmBeA,EAbE,SAACC,GAChB,OACE,sBAAKC,GAAG,WAAR,UACE,qBAAKA,GAAG,QAAR,SACE,wCAAWD,EAAME,kBAEnB,qBAAKD,GAAG,YAAR,SACE,6CAAgBD,EAAMG,mBCIfC,G,MAbO,SAACJ,GAUrB,OAAO,qBAAKC,GAAG,gBAAR,SARED,EAAMK,MAAMC,KAAI,SAACC,EAAKC,GAC3B,OACE,8BACE,qBAAKC,UAAU,aAAaR,GAAIM,EAAKG,KAAMC,IAAKJ,EAAKI,IAAKC,IAAI,GAAGC,QAASb,EAAMc,gBADxEN,UCRH,MAA0B,qCCYxBO,G,MAPH,WAEV,OAAO,qBAAKd,GAAG,iBAAR,SACH,qBAAKA,GAAG,OAAOe,MAAO,CAACC,UAAU,OAAOC,MAAM,OAAQP,IAAKQ,EAAOP,IAAI,SCR/D,MAA0B,oCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,iCCA1B,MAA0B,oCCA1B,MAA0B,mCCqF1BQ,MAzEf,WAEE,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAAkCF,mBAAS,GAA3C,mBAAOlB,EAAP,KAAkBqB,EAAlB,KAGMC,EAAc,CAClB,CAAEf,KAAM,UAAWgB,SAAS,EAAOC,SAAU,EAAEhB,IAAIiB,GACnD,CAAElB,KAAM,QAASgB,SAAS,EAAOC,SAAU,EAAEhB,IAAIkB,GACjD,CAAEnB,KAAM,QAASgB,SAAS,EAAOC,SAAU,EAAEhB,IAAImB,GACjD,CAAEpB,KAAM,OAAQgB,SAAS,EAAOC,SAAU,EAAEhB,IAAIoB,GAChD,CAAErB,KAAM,UAAWgB,SAAS,EAAOC,SAAU,EAAEhB,IAAKqB,GACpD,CAAEtB,KAAM,SAAUgB,SAAS,EAAOC,SAAU,EAAEhB,IAAKsB,IAIrD,EAA0BZ,mBAASI,GAAnC,mBAAOpB,EAAP,KAAc6B,EAAd,KA0BA,SAASC,EAAQC,GAKf,IAJA,IACIC,EADAC,EAAWF,EAAMG,OAIdD,GAAU,CAEfD,KAAaG,KAAKC,SAAWH,GAC7BA,IAHe,MAKuC,CACpDF,EAAMC,GAASV,SACfS,EAAME,GAAUX,UAFjBS,EAAME,GAAUX,SALF,KAKYS,EAAMC,GAASV,SAL3B,WAUqB,CAACS,EAAMC,GAAUD,EAAME,IAA1DF,EAAME,GAVQ,KAUGF,EAAMC,GAVT,KAYjB,OAAOD,EAGT,OACE,sBAAK3B,UAAU,MAAMO,MAAO,CAAC0B,OAAO,EAAEC,QAAQ,GAA9C,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUzC,aAAcoB,EAAOnB,UAAWA,IAC1C,cAAC,EAAD,CAAeE,MAAOA,EAAOS,aA/CZ,SAAC8B,GAEpB,IAAMpC,EAAQH,EAAMwC,WAAU,SAACC,GAAD,OAAOA,EAAEpC,OAASkC,EAAEG,OAAO9C,MAIpDI,EAAMG,GAAOkB,SAOZJ,EAAQnB,GACVqB,EAAaF,GAEfC,EAAS,GACTW,EAASC,EAAQV,MAVjBF,EAASD,EAAQ,GAEjBjB,EAAMG,GAAOkB,SAAU,EACvBQ,EAASC,EAAQ9B,YC/BR2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5b6541a6.chunk.js","sourcesContent":["import React from 'react';\nimport './scoreBar.css'\n\n\n// Creates a score bar which consists of two divs with a p-tag showing current score and\n// best score\nconst ScoreBar = (props) => {\n  return (\n    <div id='ScoreBar'>\n      <div id='Score'>\n        <p>Score: {props.currentScore}</p>\n      </div>\n      <div id='BestScore'>\n        <p>Best Score: {props.bestScore}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreBar;\n","import React from 'react';\nimport './cardContainer.css'\n\n// Creates a container with six cards, each card is a div with an image\nconst CardContainer = (props) => {\n  const createCards = () => {\n    return props.cards.map((card,index) => {\n      return (\n        <div key={index}>\n          <img className='card-image' id={card.name} src={card.src} alt='' onClick={props.clickHandler}></img>\n        </div>\n      );\n    });\n  };\n  return <div id='CardContainer'>{createCards()}</div>;\n};\n\nexport default CardContainer;\n","export default __webpack_public_path__ + \"static/media/Solarium.a59d43ef.png\";","import React from 'react';\nimport logo from './Solarium.png'\nimport './title.css'\n\n// Cretae title bar with a logo inside of a div\nconst Title = () => {\n    \n    return <div id='TitleContainer'>\n        <img id='Logo' style={{maxHeight:'100%',width:'50%'}} src={logo}  alt=''></img>\n    </div>;\n  };\n  \n  export default Title;","export default __webpack_public_path__ + \"static/media/Mercury.c32c6d4c.png\";","export default __webpack_public_path__ + \"static/media/Earth.d04d2004.png\";","export default __webpack_public_path__ + \"static/media/Venus.008b3c41.png\";","export default __webpack_public_path__ + \"static/media/Mars.22a6594c.png\";","export default __webpack_public_path__ + \"static/media/Jupiter.1263c87c.png\";","export default __webpack_public_path__ + \"static/media/Saturn.0e49e8c3.png\";","import './App.css';\nimport React, { useState } from 'react';\nimport ScoreBar from './components/score-bar';\nimport CardContainer from './components/card-container';\nimport Title from './components/title';\nimport mercury from './components/Mercury.png'\nimport earth from './components/Earth.png'\nimport venus from './components/Venus.png'\nimport mars from './components/Mars.png'\nimport jupiter from './components/Jupiter.png'\nimport saturn from './components/Saturn.png'\n\nfunction App() {\n  // Set initial score to zero\n  const [score, setScore] = useState(0);\n\n  // Set initial best score to zero\n  const [bestScore, setBestScore] = useState(0);\n\n  // An array of planets to be used for creating the planet cards\n  const planetArray = [\n    { name: 'mercury', clicked: false, position: 0,src:mercury },\n    { name: 'venus', clicked: false, position: 1,src:venus },\n    { name: 'earth', clicked: false, position: 2,src:earth },\n    { name: 'mars', clicked: false, position: 3,src:mars },\n    { name: 'jupiter', clicked: false, position: 4,src: jupiter },\n    { name: 'saturn', clicked: false, position: 5,src: saturn },\n  ];\n\n  // Set initial set of cards to planetArray\n  const [cards, setCards] = useState(planetArray);\n\n  // A function which runs every time a card is clicked\n  const clickHandler = (e) => {\n    // Get index of clicked card in cards\n    const index = cards.findIndex((x) => x.name === e.target.id);\n\n    // If this card was not clicked before increase score and reshuffle,\n    // else check best score; set score to 0 and reshuffle.\n    if (!cards[index].clicked) {\n      setScore(score + 1);\n      // Set this card to clicked\n      cards[index].clicked = true;\n      setCards(shuffle(cards));\n    } else {\n      // If current score is better than previous best score then set best score to this one\n      if (score > bestScore) {\n        setBestScore(score);\n      }\n      setScore(0);\n      setCards(shuffle(planetArray));\n    }\n  };\n\n\n  // Reshuffle array \n  function shuffle(array) {\n    let thisCard = array.length;\n    let rndCard;\n\n    // While cards remain \n    while (thisCard) {\n      // Pick a random card and decrement number of remaining cards\n      rndCard = ~~(Math.random() * thisCard);\n      thisCard--;\n      // Replace current card position with random card poistion\n      [array[thisCard].position, array[rndCard].position] = [\n        array[rndCard].position,\n        array[thisCard].position,\n      ];\n      // Replace current card with random card\n      [array[thisCard], array[rndCard]] = [array[rndCard], array[thisCard]];\n    }\n    return array;\n  }\n\n  return (\n    <div className='App' style={{margin:0,padding:0}}>\n      <Title />\n      <ScoreBar currentScore={score} bestScore={bestScore} />\n      <CardContainer cards={cards} clickHandler={clickHandler} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}